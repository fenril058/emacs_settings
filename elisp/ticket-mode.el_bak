s&;;    Ticket mode.
;;

; 作業リスト

; 1. 各領域を移動するキーバインドがあるとよい
; 2. 一行しか書かないコマンドに領域指定はいらない？


; 3. (defun ticket-mode-get-item-alist (item-list)を削除し
;    ticket-moge-item-alistの代わりにitemリストのtextに値を設定する用に変更する。


; 1. バッファを走査して取得した値を利用して、チケットを発行するように設定する。
; 3. 領域の文字列を取得する処理以外にini形式で値を取得する処理を追加する。
; 4. プロジェクトはticketに設定する項目ではないのでチケット項目から切り離す。
; 5. テンプレート作成時に各チケット項目に合わせて初期入力値を設定する。

 

; 使用する環境に合わせて以下を設定
(defvar ticket-mode-trac-home "/var/trac")
(defvar ticket-mode-trac-project "test_project")
(defvar ticket-mode-trac-db-path "db/trac.db")
(defvar ticket-mode-sqlite-cmd "sqlite3")

;;; チケット項目の設定 =========================================================
(defvar ticket-mode-item-type
  (list :name "type"
	:text "defect"
	:areatype 0))
(defvar ticket-mode-item-component
  (list :name "component"
	:text "component1"
	:areatype 0))
(defvar ticket-mode-item-severity
  (list :name "severity" 
	:text "これはSeverity"
	:areatype 0))
(defvar ticket-mode-item-priority
  (list :name "priority"
	:text "major"
	:areatype 0))
(defvar ticket-mode-item-owner
  (list :name "owner"
	:text user-full-name
	:areatype 0))
(defvar ticket-mode-item-reporter
  (list :name "reporter"
	:text user-full-name
	:areatype 0))
(defvar ticket-mode-item-cc
  (list :name "cc"
	:text ""
	:areatype 0))
(defvar ticket-mode-item-version
  (list :name "version"
	:text ""
	:areatype 0))
(defvar ticket-mode-item-milestone
  (list :name "milestone"
	:text ""
	:areatype 0))
(defvar ticket-mode-item-status
  (list :name "status"
	:text "new"
	:areatype 0))
(defvar ticket-mode-item-resolution
  (list :name "resolution"
	:text ""
	:areatype 0))
(defvar ticket-mode-item-summary
  (list :name "summary"
	:text ""
	:areatype 0))
(defvar ticket-mode-item-description
  (list :name "description"
	:text ""
	:areatype 1))
(defvar ticket-mode-item-keywords
  (list :name "keywords"
	:text ""
	:areatype 0))  

(defconst ticket-mode-item-lst
  (list ticket-mode-item-type
	ticket-mode-item-component
	ticket-mode-item-severity
	ticket-mode-item-priority
	ticket-mode-item-owner
	ticket-mode-item-reporter
	ticket-mode-item-cc
	ticket-mode-item-version
	ticket-mode-item-milestone
	ticket-mode-item-status
	ticket-mode-item-resolution
	ticket-mode-item-summary
	ticket-mode-item-description
	ticket-mode-item-keywords))

;;; チケット情報取得用関数 =====================================================
(defun ticket-mode-get-item (name)
  "チケット項目名よりチケット項目を取得"
  (let (ret-item)
    (dolist (item ticket-mode-item-lst ret-item)
      (if (string= name (getf item ':name))
	  (setq ret-item item)))))

(defun ticket-mode-get-item-name-lst ()
  "チケット項目名のリストを取得"
  (let (ret-lst)
    (dolist (item ticket-mode-item-lst ret-lst)
      (setq ret-lst (cons (getf item ':name) ret-lst)))
    (reverse ret-lst)))

(defun ticket-mode-get-item-text-lst ()
  "チケット項目の設定値を取得"
  (let (ret-lst)
    (dolist (item ticket-mode-item-lst ret-lst)
      (setq ret-lst (cons (getf item ':text) ret-lst)))
    (reverse ret-lst)))

(defun ticket-mode-get-item-areatype-lst ()
  "チケット項目のエリアタイプリストを取得"
  (let (ret-lst)
    (dolist (item ticket-mode-item-lst ret-lst)
      (setq ret-lst (cons (getf item ':areatype) ret-lst)))
    (reverse ret-lst)))


(defun ticket-mode-completion-list (item)
  "補完候補リスト"
  (cond 
;   ((string-equal "project" item) (list "IDC" "MN5"))
   ((string-equal "reporter" item) (list "kondou" "tsunoi"))
   nil))


(defun ticket-mode-trac-db ()
  "DBのパス"
  (concat ticket-mode-trac-home "/" 
	  ticket-mode-trac-project "/" 
	  ticket-mode-trac-db-path))


(defun ticket-mode-area-indicate-list (item)
  (let ((head-regexp (concat "^@@" (upcase item) " HEAD@@ =+"))
        (tail-regexp (concat "^@@" (upcase item) " TAIL@@ =+")))
    (list head-regexp tail-regexp)))


(defun ticket-mode-get-item-alist (item-list)
  "*Ticket*バッファを解析しチケット項目とその値を持つ連想配列を取得する"
  (if (null item-list)
      ()
    (let ((item (car item-list))
          (head-and-tail-re (ticket-mode-area-indicate-list item)))
      (cons (cons item (ticket-mode-get-area-string head-and-tail-re))
            (ticket-mode-get-item-alist (cdr item-list))))))


(defun ticket-mode-get-area-point (head-and-tail-regexp)
  "指定エリアの開始、終了位置のリストを取得する"
  (save-excursion
    (goto-char (point-min))
    (if (re-search-forward (car head-and-tail-regexp) nil t)
	(progn
	  (next-line)
	  (beginning-of-line)
	  (setq begin-pos (point)))
      (error "エリアの開始文字列が見つかりません: 正規表現[%s]" (car head-and-tail-regexp)))
    (if (re-search-forward (cadr head-and-tail-regexp) nil t)
	(progn 
	  (previous-line)
	  (setq end-pos (point)))
      (error "エリアの終了文字列が見つかりません: 正規表現[%s]" (cadr head-and-tail-regexp)))
    (list begin-pos end-pos)))


(defun ticket-mode-get-area-string (head-and-tail-regexp)
  "指定エリアの文字列を取得する"
  (setq points (ticket-mode-get-area-point head-and-tail-regexp))
  (buffer-substring-no-properties (car points) (cadr points)))


(defun ticket-mode-line-string (char column-pos)
  (let (line-string)
    (setq num (- column-pos (current-column)))
    (dotimes (x num line-string)
      (setq line-string (concat line-string char)))))


;;; バッファテンプレート作成用関数群 ===========================================
;; (defun ticket-mode-insert-areatype0 (item)
;;   "一行タイプの項目エリアを作成する"
;;   (insert (getf item ':name))
;;   (move-to-column 20 t)
;;   (insert (concat "= " (getf item ':text) "\n")))

;; (defun ticket-mode-insert-areatype1 (item)
;;   "複数行タイプの項目エリアを作成する"
;;   (insert (concat "@@" (upcase (getf item ':name)) " HEAD@@ "))
;;   (insert (ticket-mode-line-string "=" 50) "\n")
;;   (insert (getf item ':text) "\n")
;;   (insert (concat "@@" (upcase (getf item ':name)) " TAIL@@ "))
;;   (insert (ticket-mode-line-string "=" 50) "\n\n\n"))

;; (defun ticket-mode-insert-ticket-item-template2 (lst)
;;   "チケット項目用のテンプレートを作成する"
;;   (if (null lst)
;;       ()
;;     (let ((item (car lst)))
;;       (if (zerop (getf item ':areatype))
;; 	  (ticket-mode-insert-areatype0 item)
;; 	(insert "\n")
;; 	(ticket-mode-insert-areatype1 item))
;;       (ticket-mode-insert-ticket-item-template2 (cdr lst)))))

(defun ticket-mode-insert-ticket-item-template (lst)
  "チケット項目用のテンプレートを作成する"
  (if (null lst)
      ()
    (let ((item (car lst)))
      (insert (concat "@@" (upcase (getf item ':name)) " HEAD@@ "))
      (insert (ticket-mode-line-string "=" 50) "\n")
      (insert (getf item ':text) "\n")
      (insert (concat "@@" (upcase (getf item ':name)) " TAIL@@ "))
      (insert (ticket-mode-line-string "=" 50) "\n\n\n")
      (ticket-mode-insert-ticket-item-template (cdr lst)))))

(defun ticket-mode-insert-template ()
  "*Ticket*バッファにテンプレートを作成する"
  (insert (concat "HOME = " ticket-mode-trac-home "\n"))
  (insert (concat "PROJECT = " ticket-mode-trac-project "\n"))
  (insert (concat "DB-PATH = " ticket-mode-trac-db-path "\n"))
  (insert (concat "SQLITE-CMD = " ticket-mode-sqlite-cmd "\n\n\n"))
  (ticket-mode-insert-ticket-item-template ticket-mode-item-lst))


(defun ticket-mode-get-setting-val (item)
  "*Ticket*バッファより指定項目値を取得"
  (save-excursion
    (defun trim-right (str)
      (substring str 0 (string-match " *$" str)))
    (if (re-search-forward (concat (upcase item) " *= *") nil t)
	(progn
	  (setq begin-pos (point))
	  (end-of-line)
	  (setq end-pos (point)))
      (error "指定項目値が見つかりません"))
    (trim-right (buffer-substring-no-properties begin-pos end-pos))))   



(defun ticket-mode-left-shift (x len)
  "左シフト(<<)"
  (if (= len 0)
      x
    (ticket-mode-left-shift (* x 2) (- len 1))))


(defun trac-get-time-string ()
  "現在時刻のtime_t文字列取得. INTEGERの桁数が足りないのでいちどfloatに変換している"
  (let ((ctime (current-time)))
    (format "%.0f" (+ (ticket-mode-left-shift (float (car ctime)) 16) (car (cdr ctime))))))


(defun ticket-mode-add-ticket-sql (column-lis value-lis)
  "チケット追加のSQL文字列"
  (defun lis-str (lis s sep)
    (if (null lis)
        s
      (lis-str (cdr lis) (concat s (if (string= s "") "" sep) (car lis)) sep)))
  (let ((column-str (lis-str column-lis "" ","))
        (value-str (lis-str value-lis "" ",")))
    (concat "insert into ticket (" column-str ") values (" value-str ")")))



;;; interactive関数 ------------------------------------------------------------
(defun ticket-mode-disp-item-alist ()
  "*Ticket*バッファを解析した結果を表示する"
  (interactive)
  (defun disp-item (item-list)
    (if (null item-list)
        ()
      ((lambda (lst)
         (let ((item (car lst)))
           (insert item " --> \"" (cdr (assoc item (ticket-mode-get-item-alist item-list))) "\"\n"))
         (disp-item (cdr lst))) item-list)))  
  (disp-item (ticket-mode-get-item-name-lst)))


(defun ticket-mode-add-ticket ()
  "チケットを追加する"
  (interactive)
  (defun strval (lst)
    (let (ret-lst)
      (dolist (item lst ret-lst)
	(setq ret-lst (cons (concat "'" item "'") ret-lst)))
      (reverse ret-lst)))
  
  (let ((name-lst (ticket-mode-get-item-name-lst))
	(text-lst (strval (ticket-mode-get-item-text-lst)))
	(time (trac-get-time-string)))
    
    (setq name-lst (append name-lst '("time" "changetime")))
    (setq text-lst (append text-lst (list time time)))
    (call-process ticket-mode-sqlite-cmd nil t nil
		  (ticket-mode-trac-db)
		  (ticket-mode-add-ticket-sql name-lst text-lst))
    (message "チケットを追加しました")))


(defun ticket-mode-completion ()
  "*現在のカーソル位置から補完入力を行う"
  (interactive)
  (let ((item-list (ticket-mode-get-item-name-lst)) (cur-point (point)) (read-string ""))

    (while item-list
      (setq item (car item-list))
      (setq head-and-tail (ticket-mode-area-indicate-list item))
      (setq points (ticket-mode-get-area-point head-and-tail))
      (if (and (>= cur-point (car points)) (<= cur-point (cadr points)))
	  (progn 
	    (setq comp-list (ticket-mode-completion-list item))
	    (setq init-string (car comp-list))
	    (setq completion-ignore-case t)
	    (if comp-list
		(setq read-string (completing-read (concat item ": ") comp-list nil t init-string)))))
      (setq item-list (cdr item-list)))
    (insert read-string)))


;;; チケットモード定義 ---------------------------------------------------------
(defun ticket-mode ()
  "Tracのチケット作成を行うモード"
  (interactive)
  (pop-to-buffer "*Ticket*" nil)
  (kill-all-local-variables)
  (set-buffer "*Ticket*")
  (ticket-mode-insert-template)
  (setq major-mode 'ticket-mode)
  (setq mode-name "Ticket")
  (setq ticket-mode-map (make-keymap))
  (define-key ticket-mode-map "\C-c\C-c" 'ticket-mode-disp-item-alist)
  (define-key ticket-mode-map "\C-c\C-v" 'ticket-mode-completion)
  (define-key ticket-mode-map "\C-c\C-d" 'ticket-mode-add-ticket)
  (use-local-map ticket-mode-map)
)


(provide 'ticket-mode)
;;; ticket-mode.el ends here


