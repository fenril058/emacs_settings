;;    Ticket mode.
;;

; ’ºî’¶È’¥ê’¥¹’¥È

; 1. ’³Æ’ÎÎ’°è’¤ò’°Ü’Æ°’¤¹’¤ë’¥­’¡¼’¥Ð’¥¤’¥ó’¥É’¤¬’¤¢’¤ë’¤È’¤è’¤¤
; 2. ’°ì’¹Ô’¤·’¤«’½ñ’¤«’¤Ê’¤¤’¥³’¥Þ’¥ó’¥É’¤Ë’ÎÎ’°è’»Ø’Äê’¤Ï’¤¤’¤é’¤Ê’¤¤’¡©


; 3. (defun ticket-mode-get-item-alist (item-list)’¤ò’ºï’½ü’¤·
;    ticket-moge-item-alist’¤Î’Âå’¤ï’¤ê’¤Ëitem’¥ê’¥¹’¥È’¤Îtext’¤Ë’ÃÍ’¤ò’Àß’Äê’¤¹’¤ë’ÍÑ’¤Ë’ÊÑ’¹¹’¤¹’¤ë’¡£


; 1. ’¥Ð’¥Ã’¥Õ’¥¡’¤ò’Áö’ºº’¤·’¤Æ’¼è’ÆÀ’¤·’¤¿’ÃÍ’¤ò’Íø’ÍÑ’¤·’¤Æ’¡¢’¥Á’¥±’¥Ã’¥È’¤ò’È¯’¹Ô’¤¹’¤ë’¤è’¤¦’¤Ë’Àß’Äê’¤¹’¤ë’¡£
; 3. ’ÎÎ’°è’¤Î’Ê¸’»ú’Îó’¤ò’¼è’ÆÀ’¤¹’¤ë’½è’Íý’°Ê’³°’¤Ëini’·Á’¼°’¤Ç’ÃÍ’¤ò’¼è’ÆÀ’¤¹’¤ë’½è’Íý’¤ò’ÄÉ’²Ã’¤¹’¤ë’¡£
; 4. ’¥×’¥í’¥¸’¥§’¥¯’¥È’¤Ïticket’¤Ë’Àß’Äê’¤¹’¤ë’¹à’ÌÜ’¤Ç’¤Ï’¤Ê’¤¤’¤Î’¤Ç’¥Á’¥±’¥Ã’¥È’¹à’ÌÜ’¤«’¤é’ÀÚ’¤ê’Î¥’¤¹’¡£
; 5. ’¥Æ’¥ó’¥×’¥ì’¡¼’¥È’ºî’À®’»þ’¤Ë’³Æ’¥Á’¥±’¥Ã’¥È’¹à’ÌÜ’¤Ë’¹ç’¤ï’¤»’¤Æ’½é’´ü’Æþ’ÎÏ’ÃÍ’¤ò’Àß’Äê’¤¹’¤ë’¡£

 

; ’»È’ÍÑ’¤¹’¤ë’´Ä’¶­’¤Ë’¹ç’¤ï’¤»’¤Æ’°Ê’²¼’¤ò’Àß’Äê
(defvar ticket-mode-trac-home "/var/trac")
(defvar ticket-mode-trac-project "test_project")
(defvar ticket-mode-trac-db-path "db/trac.db")
(defvar ticket-mode-sqlite-cmd "sqlite3")

;;; ’¥Á’¥±’¥Ã’¥È’¹à’ÌÜ’¤Î’Àß’Äê =========================================================
(defvar ticket-mode-item-type
  (list :name "type"
	:text "defect"
	:areatype 0))
(defvar ticket-mode-item-component
  (list :name "component"
	:text "component1"
	:areatype 0))
(defvar ticket-mode-item-severity
  (list :name "severity" 
	:text "’¤³’¤ì’¤ÏSeverity"
	:areatype 0))
(defvar ticket-mode-item-priority
  (list :name "priority"
	:text "major"
	:areatype 0))
(defvar ticket-mode-item-owner
  (list :name "owner"
	:text user-full-name
	:areatype 0))
(defvar ticket-mode-item-reporter
  (list :name "reporter"
	:text user-full-name
	:areatype 0))
(defvar ticket-mode-item-cc
  (list :name "cc"
	:text ""
	:areatype 0))
(defvar ticket-mode-item-version
  (list :name "version"
	:text ""
	:areatype 0))
(defvar ticket-mode-item-milestone
  (list :name "milestone"
	:text ""
	:areatype 0))
(defvar ticket-mode-item-status
  (list :name "status"
	:text "new"
	:areatype 0))
(defvar ticket-mode-item-resolution
  (list :name "resolution"
	:text ""
	:areatype 0))
(defvar ticket-mode-item-summary
  (list :name "summary"
	:text ""
	:areatype 0))
(defvar ticket-mode-item-keywords
  (list :name "keywords"
	:text ""
	:areatype 0))  
(defvar ticket-mode-item-description
  (list :name "description"
	:text ""
	:areatype 1))

(defconst ticket-mode-item-lst
  (list ticket-mode-item-type
	ticket-mode-item-component
	ticket-mode-item-severity
	ticket-mode-item-priority
	ticket-mode-item-owner
	ticket-mode-item-reporter
	ticket-mode-item-cc
	ticket-mode-item-version
	ticket-mode-item-milestone
	ticket-mode-item-status
	ticket-mode-item-resolution
	ticket-mode-item-summary
	ticket-mode-item-keywords
	ticket-mode-item-description))

;;; ’¥Á’¥±’¥Ã’¥È’¾ð’Êó’¼è’ÆÀ’ÍÑ’´Ø’¿ô =====================================================
(defun ticket-mode-get-item (name)
  "’¥Á’¥±’¥Ã’¥È’¹à’ÌÜ’Ì¾’¤è’¤ê’¥Á’¥±’¥Ã’¥È’¹à’ÌÜ’¤ò’¼è’ÆÀ"
  (let (ret-item)
    (dolist (item ticket-mode-item-lst ret-item)
      (if (string= name (getf item ':name))
	  (setq ret-item item)))))

(defun ticket-mode-get-item-name-lst ()
  "’¥Á’¥±’¥Ã’¥È’¹à’ÌÜ’Ì¾’¤Î’¥ê’¥¹’¥È’¤ò’¼è’ÆÀ"
  (let (ret-lst)
    (dolist (item ticket-mode-item-lst ret-lst)
      (setq ret-lst (cons (getf item ':name) ret-lst)))
    (reverse ret-lst)))

(defun ticket-mode-get-item-text-lst ()
  "’¥Á’¥±’¥Ã’¥È’¹à’ÌÜ’¤Î’Àß’Äê’ÃÍ’¤ò’¼è’ÆÀ"
  (let (ret-lst)
    (dolist (item ticket-mode-item-lst ret-lst)
      (setq ret-lst (cons (getf item ':text) ret-lst)))
    (reverse ret-lst)))

(defun ticket-mode-get-item-areatype-lst ()
  "’¥Á’¥±’¥Ã’¥È’¹à’ÌÜ’¤Î’¥¨’¥ê’¥¢’¥¿’¥¤’¥×’¥ê’¥¹’¥È’¤ò’¼è’ÆÀ"
  (let (ret-lst)
    (dolist (item ticket-mode-item-lst ret-lst)
      (setq ret-lst (cons (getf item ':areatype) ret-lst)))
    (reverse ret-lst)))






(defun ticket-mode-completion-list (item)
  "’Êä’´°’¸õ’Êä’¥ê’¥¹’¥È"
  (cond 
;   ((string-equal "project" item) (list "IDC" "MN5"))
   ((string-equal "reporter" item) (list "kondou" "tsunoi"))
   nil))


(defun ticket-mode-trac-db ()
  "DB’¤Î’¥Ñ’¥¹"
  (concat ticket-mode-trac-home "/" 
	  ticket-mode-trac-project "/" 
	  ticket-mode-trac-db-path))


(defun ticket-mode-area-indicate-list (item)
  (let ((head-regexp (concat "^@@" (upcase item) " HEAD@@ =+"))
        (tail-regexp (concat "^@@" (upcase item) " TAIL@@ =+")))
    (list head-regexp tail-regexp)))


(defun ticket-mode-get-item-alist (item-list)
  "*Ticket*’¥Ð’¥Ã’¥Õ’¥¡’¤ò’²ò’ÀÏ’¤·’¥Á’¥±’¥Ã’¥È’¹à’ÌÜ’¤È’¤½’¤Î’ÃÍ’¤ò’»ý’¤Ä’Ï¢’ÁÛ’ÇÛ’Îó’¤ò’¼è’ÆÀ’¤¹’¤ë"
  (if (null item-list)
      ()
    (let ((item (car item-list))
          (head-and-tail-re (ticket-mode-area-indicate-list item)))
      (cons (cons item (ticket-mode-get-area-string head-and-tail-re))
            (ticket-mode-get-item-alist (cdr item-list))))))


(defun ticket-mode-get-area-point (head-and-tail-regexp)
  "’»Ø’Äê’¥¨’¥ê’¥¢’¤Î’³«’»Ï’¡¢’½ª’Î»’°Ì’ÃÖ’¤Î’¥ê’¥¹’¥È’¤ò’¼è’ÆÀ’¤¹’¤ë"
  (save-excursion
    (goto-char (point-min))
    (if (re-search-forward (car head-and-tail-regexp) nil t)
	(progn
	  (next-line)
	  (beginning-of-line)
	  (setq begin-pos (point)))
      (error "’¥¨’¥ê’¥¢’¤Î’³«’»Ï’Ê¸’»ú’Îó’¤¬’¸«’¤Ä’¤«’¤ê’¤Þ’¤»’¤ó: ’Àµ’µ¬’É½’¸½[%s]" (car head-and-tail-regexp)))
    (if (re-search-forward (cadr head-and-tail-regexp) nil t)
	(progn 
	  (previous-line)
	  (setq end-pos (point)))
      (error "’¥¨’¥ê’¥¢’¤Î’½ª’Î»’Ê¸’»ú’Îó’¤¬’¸«’¤Ä’¤«’¤ê’¤Þ’¤»’¤ó: ’Àµ’µ¬’É½’¸½[%s]" (cadr head-and-tail-regexp)))
    (list begin-pos end-pos)))


(defun ticket-mode-get-area-string (head-and-tail-regexp)
  "’»Ø’Äê’¥¨’¥ê’¥¢’¤Î’Ê¸’»ú’Îó’¤ò’¼è’ÆÀ’¤¹’¤ë"
  (setq points (ticket-mode-get-area-point head-and-tail-regexp))
  (buffer-substring-no-properties (car points) (cadr points)))


(defun ticket-mode-line-string (char column-pos)
  (let (line-string)
    (setq num (- column-pos (current-column)))
    (dotimes (x num line-string)
      (setq line-string (concat line-string char)))))


;;; ’¥Ð’¥Ã’¥Õ’¥¡’¥Æ’¥ó’¥×’¥ì’¡¼’¥È’ºî’À®’ÍÑ’´Ø’¿ô’·² ===========================================
(defun ticket-mode-insert-template ()
  "*Ticket*’¥Ð’¥Ã’¥Õ’¥¡’¤Ë’¥Æ’¥ó’¥×’¥ì’¡¼’¥È’¤ò’ºî’À®’¤¹’¤ë"
  (insert "== ’¥×’¥í’¥¸’¥§’¥¯’¥È’Àß’Äê’¹à’ÌÜ ")
  (insert (ticket-mode-line-string "=" 50) "\n")
  (insert "HOME")
  (move-to-column 20 t)
  (insert "= " ticket-mode-trac-home "\n")
  (insert "PROJECT")
  (move-to-column 20 t)
  (insert "= " ticket-mode-trac-project "\n")
  (insert "DB-PATH")
  (move-to-column 20 t)
  (insert "= " ticket-mode-trac-db-path "\n")
  (insert "SQLITE-CMD")
  (move-to-column 20 t)
  (insert "= " ticket-mode-sqlite-cmd "\n")
  (insert (ticket-mode-line-string "=" 50) "\n\n\n")
  (insert "== ’¥Á’¥±’¥Ã’¥È’¹à’ÌÜ ")
  (insert (ticket-mode-line-string "=" 50) "\n")
  (ticket-mode-insert-ticket-item-template ticket-mode-item-lst)
  (insert (ticket-mode-line-string "=" 50) "\n")
  )

(defun ticket-mode-insert-ticket-item-template (lst)
  "’¥Á’¥±’¥Ã’¥È’¹à’ÌÜ’ÍÑ’¤Î’¥Æ’¥ó’¥×’¥ì’¡¼’¥È’¤ò’ºî’À®’¤¹’¤ë"
  (if (null lst)
      ()
    (let ((item (car lst)))
      (if (zerop (getf item ':areatype))
	  (ticket-mode-insert-areatype0 item)
	(insert "\n")
	(ticket-mode-insert-areatype1 item))
      (ticket-mode-insert-ticket-item-template (cdr lst)))))

(defun ticket-mode-insert-areatype0 (item)
  "’°ì’¹Ô’¥¿’¥¤’¥×’¤Î’¹à’ÌÜ’¥¨’¥ê’¥¢’¤ò’ºî’À®’¤¹’¤ë"
  (insert (getf item ':name))
  (move-to-column 20 t)
  (insert (concat "= " (getf item ':text) "\n")))

(defun ticket-mode-insert-areatype1 (item)
  "’Ê£’¿ô’¹Ô’¥¿’¥¤’¥×’¤Î’¹à’ÌÜ’¥¨’¥ê’¥¢’¤ò’ºî’À®’¤¹’¤ë"
  (insert (concat "@@" (upcase (getf item ':name)) " HEAD@@ "))
  (insert (ticket-mode-line-string "=" 50) "\n")
  (insert (getf item ':text) "\n")
  (insert (concat "@@" (upcase (getf item ':name)) " TAIL@@ "))
  (insert (ticket-mode-line-string "=" 50) "\n\n\n"))


;;; ’¥Ð’¥Ã’¥Õ’¥¡’¤è’¤ê’Àß’Äê’ÃÍ’¤ò’¼è’ÆÀ’¤¹’¤ë’´Ø’¿ô’·² =========================================
(defun ticket-mode-get-area-text0 (item)
  "*Ticket*’¥Ð’¥Ã’¥Õ’¥¡’¤è’¤ê’Àß’Äê’ÃÍ’¤ò’¼è’ÆÀ’¤¹’¤ë(areatype:0)"
  (save-excursion
    (let ((name (getf item ':name)))
      (if (re-search-forward (concat "^" name " *= *") nil t)
	  (progn 
	    (setq begin-pos (point))
	    (end-of-line)
	    (skip-chars-backward " \t")
	    (setq end-pos (point)))
	(error "’»Ø’Äê’¹à’ÌÜ’ÃÍ’¤¬’¸«’¤Ä’¤«’¤ê’¤Þ’¤»’¤ó"))
      (buffer-substring-no-properties begin-pos end-pos))))

(defun ticket-mode-get-area-text1 (item)
  "*Ticket*’¥Ð’¥Ã’¥Õ’¥¡’¤è’¤ê’Àß’Äê’ÃÍ’¤ò’¼è’ÆÀ’¤¹’¤ë(areatype:1)"
  (let ((head-and-tail-re 
	 (ticket-mode-area-indicate-list (getf item ':name))))
    (ticket-mode-get-area-string head-and-tail-re)))



(defun ticket-mode-get-setting-val (item)
  "*Ticket*’¥Ð’¥Ã’¥Õ’¥¡’¤è’¤ê’»Ø’Äê’¹à’ÌÜ’ÃÍ’¤ò’¼è’ÆÀ"
  (save-excursion
    (defun trim-right (str)
      (substring str 0 (string-match " *$" str)))
    (if (re-search-forward (concat (upcase item) " *= *") nil t)
	(progn
	  (setq begin-pos (point))
	  (end-of-line)
	  (setq end-pos (point)))
      (error "’»Ø’Äê’¹à’ÌÜ’ÃÍ’¤¬’¸«’¤Ä’¤«’¤ê’¤Þ’¤»’¤ó"))
    (trim-right (buffer-substring-no-properties begin-pos end-pos))))   




(defun ticket-mode-left-shift (x len)
  "’º¸’¥·’¥Õ’¥È(<<)"
  (if (= len 0)
      x
    (ticket-mode-left-shift (* x 2) (- len 1))))


(defun trac-get-time-string ()
  "’¸½’ºß’»þ’¹ï’¤Îtime_t’Ê¸’»ú’Îó’¼è’ÆÀ. INTEGER’¤Î’·å’¿ô’¤¬’Â­’¤ê’¤Ê’¤¤’¤Î’¤Ç’¤¤’¤Á’¤Éfloat’¤Ë’ÊÑ’´¹’¤·’¤Æ’¤¤’¤ë"
  (let ((ctime (current-time)))
    (format "%.0f" (+ (ticket-mode-left-shift (float (car ctime)) 16) (car (cdr ctime))))))


(defun ticket-mode-add-ticket-sql (column-lis value-lis)
  "’¥Á’¥±’¥Ã’¥È’ÄÉ’²Ã’¤ÎSQL’Ê¸’»ú’Îó"
  (defun lis-str (lis s sep)
    (if (null lis)
        s
      (lis-str (cdr lis) (concat s (if (string= s "") "" sep) (car lis)) sep)))
  (let ((column-str (lis-str column-lis "" ","))
        (value-str (lis-str value-lis "" ",")))
    (concat "insert into ticket (" column-str ") values (" value-str ")")))



;;; interactive’´Ø’¿ô ------------------------------------------------------------
(defun ticket-mode-disp-item-alist ()
  "*Ticket*’¥Ð’¥Ã’¥Õ’¥¡’¤ò’²ò’ÀÏ’¤·’¤¿’·ë’²Ì’¤ò’É½’¼¨’¤¹’¤ë"
  (interactive)
  (defun disp-item (item-list)
    (if (null item-list)
        ()
      ((lambda (lst)
         (let ((item (car lst)))
           (insert item " --> \"" (cdr (assoc item (ticket-mode-get-item-alist item-list))) "\"\n"))
         (disp-item (cdr lst))) item-list)))  
  (disp-item (ticket-mode-get-item-name-lst)))


(defun ticket-mode-add-ticket ()
  "’¥Á’¥±’¥Ã’¥È’¤ò’ÄÉ’²Ã’¤¹’¤ë"
  (interactive)
  (defun strval (lst)
    (let (ret-lst)
      (dolist (item lst ret-lst)
	(setq ret-lst (cons (concat "'" item "'") ret-lst)))
      (reverse ret-lst)))
  
  (let ((name-lst (ticket-mode-get-item-name-lst))
	(text-lst (strval (ticket-mode-get-item-text-lst)))
	(time (trac-get-time-string)))
    
    (setq name-lst (append name-lst '("time" "changetime")))
    (setq text-lst (append text-lst (list time time)))
    (call-process ticket-mode-sqlite-cmd nil t nil
		  (ticket-mode-trac-db)
		  (ticket-mode-add-ticket-sql name-lst text-lst))
    (message "’¥Á’¥±’¥Ã’¥È’¤ò’ÄÉ’²Ã’¤·’¤Þ’¤·’¤¿")))


(defun ticket-mode-completion ()
  "*’¸½’ºß’¤Î’¥«’¡¼’¥½’¥ë’°Ì’ÃÖ’¤«’¤é’Êä’´°’Æþ’ÎÏ’¤ò’¹Ô’¤¦"
  (interactive)
  (let ((item-list (ticket-mode-get-item-name-lst)) (cur-point (point)) (read-string ""))

    (while item-list
      (setq item (car item-list))
      (setq head-and-tail (ticket-mode-area-indicate-list item))
      (setq points (ticket-mode-get-area-point head-and-tail))
      (if (and (>= cur-point (car points)) (<= cur-point (cadr points)))
	  (progn 
	    (setq comp-list (ticket-mode-completion-list item))
	    (setq init-string (car comp-list))
	    (setq completion-ignore-case t)
	    (if comp-list
		(setq read-string (completing-read (concat item ": ") comp-list nil t init-string)))))
      (setq item-list (cdr item-list)))
    (insert read-string)))


;;; ’¥Á’¥±’¥Ã’¥È’¥â’¡¼’¥É’Äê’µÁ ---------------------------------------------------------
(defun ticket-mode ()
  "Trac’¤Î’¥Á’¥±’¥Ã’¥È’ºî’À®’¤ò’¹Ô’¤¦’¥â’¡¼’¥É"
  (interactive)
  (pop-to-buffer "*Ticket*" nil)
  (kill-all-local-variables)
  (set-buffer "*Ticket*")
  (ticket-mode-insert-template)
  (setq major-mode 'ticket-mode)
  (setq mode-name "Ticket")
  (setq ticket-mode-map (make-keymap))
  (define-key ticket-mode-map "\C-c\C-c" 'ticket-mode-disp-item-alist)
  (define-key ticket-mode-map "\C-c\C-v" 'ticket-mode-completion)
  (define-key ticket-mode-map "\C-c\C-d" 'ticket-mode-add-ticket)
  (use-local-map ticket-mode-map)
)


(provide 'ticket-mode)
;;; ticket-mode.el ends here


